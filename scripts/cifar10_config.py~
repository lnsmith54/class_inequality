import torch
import torchvision
import torchvision.transforms as transforms
from torch.utils.data import DataLoader, RandomSampler, WeightedRandomSampler, BatchSampler, Subset
import random
from utility.cutout import Cutout
import numpy as np
import argparse

class Cifar:
    def __init__(self, numPerClass):
        # Initialization for Cifar10
        cifar10_mean = (0.4914, 0.4822, 0.4465)
        cifar10_std = (0.2471, 0.2435, 0.2616)
        cifar10TrainSize = [50000, 10]
        batch_size = 1000

        size = sum(numPerClass)
        print("size ", size)

        transform = transforms.Compose([
            transforms.ToTensor(),
            transforms.Normalize(cifar10_mean, cifar10_std),
        ])
        self.train_set = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)
        
        train_samples = []
        labels = []
        i = 0
        indx = np.zeros([10], dtype=int)
        samples = np.zeros(cifar10TrainSize, dtype=int)
    
        for sample, label in DataLoader(self.train_set, batch_size=batch_size ):
            for lab in label:
                l = lab.item()
                samples[indx[l],l] = i            
                indx[l] += 1
                i += 1

        for seed in range(args.num_seeds):
            for i in range(cifar10TrainSize[1]):
                rng = random.sample(samples[:indx[i],i].tolist(),k=numPerClass[i])
                for r in rng:
                    train_samples.append(r)

            filename = ('data/config/cifar10.%d@%d%s' % (seed, size, args.equal) )
            print("Writ8ing file ", filename)
            fileOut = open(filename,'w')

            for i in range(cifar10TrainSize[1]):
                fileOut.write(str(numPerClass[i])+", ")
            fileOut.write("\n")

            for i in range(size):
                fileOut.write(str(train_samples[i])+", ")
            fileOut.write("\n")

#            fileOut.write(train_samples)
#            fileOut.write("\n")

            fileOut.close()

        exit(1)

if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument("--num_seeds", default=1, type=int, help="Number of config files to create")
    args = parser.parse_args()
    print(args)

    args.equal = "equal"
    numPerClass = [40, 40, 40, 40, 40, 40, 40, 40, 40, 40]
    
    dataset = Cifar(numPerClass)

